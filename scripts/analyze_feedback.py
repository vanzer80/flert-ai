#!/usr/bin/env python3
"""
Script de An√°lise de Feedback - FlertAI
========================================

Este script analisa os feedbacks dos usu√°rios sobre as sugest√µes geradas pela IA,
identificando padr√µes, problemas e oportunidades de melhoria.

Execu√ß√£o: python analyze_feedback.py
Frequ√™ncia recomendada: Semanal ou sob demanda
"""

import os
import json
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, List, Tuple
import pandas as pd
from supabase import create_client, Client

# Configura√ß√£o do Supabase
SUPABASE_URL = os.getenv('SUPABASE_URL', '')
SUPABASE_KEY = os.getenv('SUPABASE_SERVICE_KEY', '')  # Service key para acesso admin

def init_supabase() -> Client:
    """Inicializa cliente Supabase"""
    if not SUPABASE_URL or not SUPABASE_KEY:
        raise ValueError("Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_KEY s√£o obrigat√≥rias")
    
    return create_client(SUPABASE_URL, SUPABASE_KEY)

def fetch_feedback_data(supabase: Client, days_ago: int = 7) -> pd.DataFrame:
    """
    Busca dados de feedback dos √∫ltimos N dias
    
    Args:
        supabase: Cliente Supabase
        days_ago: N√∫mero de dias para buscar feedback
        
    Returns:
        DataFrame com feedbacks
    """
    cutoff_date = (datetime.now() - timedelta(days=days_ago)).isoformat()
    
    try:
        # Buscar feedbacks com joins para obter dados relacionados
        response = supabase.table('suggestion_feedback') \
            .select('*, conversations(tone, focus_tags, analysis_result)') \
            .gte('created_at', cutoff_date) \
            .execute()
        
        if not response.data:
            print(f"‚ö†Ô∏è  Nenhum feedback encontrado nos √∫ltimos {days_ago} dias")
            return pd.DataFrame()
        
        # Converter para DataFrame
        df = pd.DataFrame(response.data)
        print(f"‚úÖ {len(df)} feedbacks carregados")
        return df
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar feedbacks: {e}")
        return pd.DataFrame()

def analyze_feedback_metrics(df: pd.DataFrame) -> Dict:
    """
    Analisa m√©tricas gerais de feedback
    
    Args:
        df: DataFrame com feedbacks
        
    Returns:
        Dicion√°rio com m√©tricas
    """
    if df.empty:
        return {}
    
    total = len(df)
    likes = len(df[df['feedback_type'] == 'like'])
    dislikes = len(df[df['feedback_type'] == 'dislike'])
    like_rate = (likes / total * 100) if total > 0 else 0
    dislike_rate = (dislikes / total * 100) if total > 0 else 0
    
    return {
        'total_feedbacks': total,
        'likes': likes,
        'dislikes': dislikes,
        'like_rate': round(like_rate, 2),
        'dislike_rate': round(dislike_rate, 2),
    }

def analyze_by_tone(df: pd.DataFrame) -> List[Dict]:
    """
    Analisa feedback por tom de mensagem
    
    Args:
        df: DataFrame com feedbacks
        
    Returns:
        Lista com an√°lise por tom
    """
    if df.empty or 'conversations' not in df.columns:
        return []
    
    # Extrair tom de cada conversa
    df['tone'] = df['conversations'].apply(
        lambda x: x.get('tone', 'unknown') if isinstance(x, dict) else 'unknown'
    )
    
    tone_stats = []
    for tone in df['tone'].unique():
        tone_df = df[df['tone'] == tone]
        total = len(tone_df)
        likes = len(tone_df[tone_df['feedback_type'] == 'like'])
        dislikes = len(tone_df[tone_df['feedback_type'] == 'dislike'])
        
        tone_stats.append({
            'tone': tone,
            'total': total,
            'likes': likes,
            'dislikes': dislikes,
            'like_rate': round((likes / total * 100) if total > 0 else 0, 2),
            'dislike_rate': round((dislikes / total * 100) if total > 0 else 0, 2),
        })
    
    # Ordenar por taxa de dislike (problemas primeiro)
    tone_stats.sort(key=lambda x: x['dislike_rate'], reverse=True)
    return tone_stats

def analyze_by_focus_tags(df: pd.DataFrame) -> List[Dict]:
    """
    Analisa feedback por focus_tags
    
    Args:
        df: DataFrame com feedbacks
        
    Returns:
        Lista com an√°lise por focus_tags
    """
    if df.empty or 'conversations' not in df.columns:
        return []
    
    # Extrair focus_tags de cada conversa
    tag_stats = defaultdict(lambda: {'likes': 0, 'dislikes': 0, 'total': 0})
    
    for _, row in df.iterrows():
        conv = row.get('conversations', {})
        if isinstance(conv, dict):
            focus_tags = conv.get('focus_tags', [])
            if isinstance(focus_tags, list):
                for tag in focus_tags:
                    tag_stats[tag]['total'] += 1
                    if row['feedback_type'] == 'like':
                        tag_stats[tag]['likes'] += 1
                    else:
                        tag_stats[tag]['dislikes'] += 1
    
    # Converter para lista
    results = []
    for tag, stats in tag_stats.items():
        total = stats['total']
        results.append({
            'focus_tag': tag,
            'total': total,
            'likes': stats['likes'],
            'dislikes': stats['dislikes'],
            'like_rate': round((stats['likes'] / total * 100) if total > 0 else 0, 2),
            'dislike_rate': round((stats['dislikes'] / total * 100) if total > 0 else 0, 2),
        })
    
    # Ordenar por taxa de dislike
    results.sort(key=lambda x: x['dislike_rate'], reverse=True)
    return results

def identify_problem_suggestions(df: pd.DataFrame, threshold: float = 70.0) -> List[Dict]:
    """
    Identifica sugest√µes com alta taxa de rejei√ß√£o
    
    Args:
        df: DataFrame com feedbacks
        threshold: Percentual m√≠nimo de dislikes para considerar problem√°tico
        
    Returns:
        Lista de sugest√µes problem√°ticas
    """
    if df.empty:
        return []
    
    # Agrupar por texto da sugest√£o
    suggestion_stats = df.groupby('suggestion_text').agg({
        'feedback_type': lambda x: {
            'total': len(x),
            'likes': (x == 'like').sum(),
            'dislikes': (x == 'dislike').sum(),
        }
    }).reset_index()
    
    problems = []
    for _, row in suggestion_stats.iterrows():
        stats = row['feedback_type']
        total = stats['total']
        dislikes = stats['dislikes']
        dislike_rate = (dislikes / total * 100) if total > 0 else 0
        
        if dislike_rate >= threshold and total >= 3:  # M√≠nimo 3 feedbacks
            problems.append({
                'suggestion_text': row['suggestion_text'],
                'total_feedbacks': total,
                'dislikes': dislikes,
                'dislike_rate': round(dislike_rate, 2),
            })
    
    # Ordenar por taxa de dislike
    problems.sort(key=lambda x: x['dislike_rate'], reverse=True)
    return problems

def generate_report(metrics: Dict, tone_analysis: List[Dict], 
                   tag_analysis: List[Dict], problems: List[Dict]) -> str:
    """
    Gera relat√≥rio em formato texto
    
    Args:
        metrics: M√©tricas gerais
        tone_analysis: An√°lise por tom
        tag_analysis: An√°lise por focus_tags
        problems: Sugest√µes problem√°ticas
        
    Returns:
        Relat√≥rio formatado
    """
    report = []
    report.append("=" * 80)
    report.append("RELAT√ìRIO DE AN√ÅLISE DE FEEDBACK - FlertAI")
    report.append(f"Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report.append("=" * 80)
    report.append("")
    
    # M√©tricas gerais
    if metrics:
        report.append("üìä M√âTRICAS GERAIS")
        report.append("-" * 40)
        report.append(f"Total de feedbacks: {metrics['total_feedbacks']}")
        report.append(f"Likes (üëç): {metrics['likes']} ({metrics['like_rate']}%)")
        report.append(f"Dislikes (üëé): {metrics['dislikes']} ({metrics['dislike_rate']}%)")
        report.append("")
    
    # An√°lise por tom
    if tone_analysis:
        report.append("üé≠ AN√ÅLISE POR TOM DE MENSAGEM")
        report.append("-" * 40)
        for tone in tone_analysis[:5]:  # Top 5
            report.append(f"\nTom: {tone['tone']}")
            report.append(f"  Total: {tone['total']}")
            report.append(f"  üëç {tone['likes']} ({tone['like_rate']}%)")
            report.append(f"  üëé {tone['dislikes']} ({tone['dislike_rate']}%)")
        report.append("")
    
    # An√°lise por focus_tags
    if tag_analysis:
        report.append("üéØ AN√ÅLISE POR FOCUS_TAGS")
        report.append("-" * 40)
        for tag in tag_analysis[:10]:  # Top 10
            report.append(f"\nTag: {tag['focus_tag']}")
            report.append(f"  Total: {tag['total']}")
            report.append(f"  üëç {tag['likes']} ({tag['like_rate']}%)")
            report.append(f"  üëé {tag['dislikes']} ({tag['dislike_rate']}%)")
        report.append("")
    
    # Sugest√µes problem√°ticas
    if problems:
        report.append("üö® SUGEST√ïES PROBLEM√ÅTICAS (>70% dislikes)")
        report.append("-" * 40)
        for prob in problems[:10]:  # Top 10
            report.append(f"\nTexto: {prob['suggestion_text'][:100]}...")
            report.append(f"  Feedbacks: {prob['total_feedbacks']}")
            report.append(f"  üëé {prob['dislikes']} ({prob['dislike_rate']}%)")
        report.append("")
    
    # Recomenda√ß√µes
    report.append("üí° RECOMENDA√á√ïES")
    report.append("-" * 40)
    
    if metrics and metrics['dislike_rate'] > 30:
        report.append("‚ö†Ô∏è  Taxa de dislike acima de 30% - revisar prompts urgentemente")
    
    if tone_analysis:
        worst_tone = tone_analysis[0]
        if worst_tone['dislike_rate'] > 50:
            report.append(f"‚ö†Ô∏è  Tom '{worst_tone['tone']}' com {worst_tone['dislike_rate']}% de rejei√ß√£o - ajustar instru√ß√µes")
    
    if tag_analysis:
        worst_tag = tag_analysis[0]
        if worst_tag['dislike_rate'] > 50:
            report.append(f"‚ö†Ô∏è  Focus_tag '{worst_tag['focus_tag']}' com {worst_tag['dislike_rate']}% de rejei√ß√£o - revisar contexto")
    
    if len(problems) > 5:
        report.append(f"‚ö†Ô∏è  {len(problems)} sugest√µes com alta rejei√ß√£o - revisar padr√µes e templates")
    
    if not metrics or metrics['dislike_rate'] < 15:
        report.append("‚úÖ Sistema funcionando bem! Continuar monitorando.")
    
    report.append("")
    report.append("=" * 80)
    
    return "\n".join(report)

def save_report(report: str, filename: str = None):
    """
    Salva relat√≥rio em arquivo
    
    Args:
        report: Conte√∫do do relat√≥rio
        filename: Nome do arquivo (opcional)
    """
    if not filename:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"feedback_report_{timestamp}.txt"
    
    reports_dir = os.path.join(os.path.dirname(__file__), '..', 'reports')
    os.makedirs(reports_dir, exist_ok=True)
    
    filepath = os.path.join(reports_dir, filename)
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\n‚úÖ Relat√≥rio salvo em: {filepath}")

def main():
    """Fun√ß√£o principal"""
    print("\n" + "=" * 80)
    print("üìä INICIANDO AN√ÅLISE DE FEEDBACK - FlertAI")
    print("=" * 80 + "\n")
    
    # Inicializar Supabase
    try:
        supabase = init_supabase()
    except ValueError as e:
        print(f"‚ùå Erro: {e}")
        print("\nüí° Configure as vari√°veis de ambiente:")
        print("   export SUPABASE_URL='sua_url'")
        print("   export SUPABASE_SERVICE_KEY='sua_key'")
        return
    
    # Buscar dados
    days = int(os.getenv('ANALYSIS_DAYS', '7'))
    print(f"üîç Buscando feedbacks dos √∫ltimos {days} dias...")
    df = fetch_feedback_data(supabase, days_ago=days)
    
    if df.empty:
        print("\n‚ö†Ô∏è  Sem dados para analisar. Encerrando.")
        return
    
    # An√°lises
    print("\nüìà Calculando m√©tricas...")
    metrics = analyze_feedback_metrics(df)
    
    print("üé≠ Analisando por tom...")
    tone_analysis = analyze_by_tone(df)
    
    print("üéØ Analisando por focus_tags...")
    tag_analysis = analyze_by_focus_tags(df)
    
    print("üö® Identificando sugest√µes problem√°ticas...")
    problems = identify_problem_suggestions(df, threshold=70.0)
    
    # Gerar relat√≥rio
    print("\nüìù Gerando relat√≥rio...")
    report = generate_report(metrics, tone_analysis, tag_analysis, problems)
    
    # Exibir relat√≥rio
    print("\n" + report)
    
    # Salvar relat√≥rio
    save_report(report)
    
    print("\n‚úÖ An√°lise conclu√≠da com sucesso!")
    print("=" * 80 + "\n")

if __name__ == "__main__":
    main()
