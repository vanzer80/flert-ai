// test/edge_function_tests.ts
// Testes automatizados para Edge Function - PROMPT G (CORRIGIDO)

import { computeAnchors } from '../src/vision/anchors.ts';

/**
 * Cen√°rios de teste realistas para computeAnchors
 */
const ANCHOR_COMPUTATION_SCENARIOS = [
  {
    name: 'Contexto B√°sico com Pessoa',
    visionContext: {
      schema_version: '1.0',
      detected_persons: { count: 1, name: 'Ana' },
      objects: [
        { name: 'guitarra', confidence: 0.89, source: 'vision' as const }
      ],
      actions: [
        { name: 'tocando', confidence: 0.85, source: 'vision' as const }
      ],
      places: [
        { name: 'quarto', confidence: 0.76, source: 'vision' as const }
      ],
      colors: ['marrom', 'preto'],
      ocr_text: 'M√∫sica √© vida üé∏',
      notable_details: ['instrumento de qualidade', 'paix√£o evidente'],
      confidence_overall: 0.87
    },
    expected_behavior: {
      shouldHaveAnchors: true,
      minAnchors: 3,
      shouldIncludePersonName: true,
      shouldIncludeObjects: true,
      shouldIncludeOCR: true
    }
  },
  {
    name: 'Contexto com M√∫ltiplas Pessoas',
    visionContext: {
      schema_version: '1.0',
      detected_persons: { count: 2, name: 'Carlos e Maria' },
      objects: [
        { name: 'bola', confidence: 0.92, source: 'vision' as const },
        { name: 'campo', confidence: 0.88, source: 'vision' as const }
      ],
      actions: [
        { name: 'jogando', confidence: 0.90, source: 'vision' as const }
      ],
      places: [
        { name: 'parque', confidence: 0.82, source: 'vision' as const }
      ],
      colors: ['verde', 'azul'],
      ocr_text: 'Futebol no parque ‚öΩ',
      notable_details: ['atividade ao ar livre', 'divers√£o em grupo'],
      confidence_overall: 0.91
    },
    expected_behavior: {
      shouldHaveAnchors: true,
      minAnchors: 4,
      shouldIncludeMultiplePersons: true,
      shouldIncludeSports: true
    }
  },
  {
    name: 'Contexto com Pet',
    visionContext: {
      schema_version: '1.0',
      detected_persons: { count: 1, name: 'Jo√£o' },
      objects: [
        { name: 'cachorro', confidence: 0.95, source: 'vision' as const },
        { name: 'coleira', confidence: 0.87, source: 'vision' as const }
      ],
      actions: [
        { name: 'passeando', confidence: 0.89, source: 'vision' as const }
      ],
      places: [
        { name: 'rua', confidence: 0.78, source: 'vision' as const }
      ],
      colors: ['preto', 'branco'],
      ocr_text: 'Passeio com meu pet üêï',
      notable_details: ['c√£o amig√°vel', 'coleira colorida'],
      confidence_overall: 0.88
    },
    expected_behavior: {
      shouldHaveAnchors: true,
      minAnchors: 3,
      shouldIncludePet: true,
      shouldIncludeActivity: true
    }
  },
  {
    name: 'Contexto com Livro/Leitura',
    visionContext: {
      schema_version: '1.0',
      detected_persons: { count: 1 },
      objects: [
        { name: 'livro', confidence: 0.93, source: 'vision' as const },
        { name: 'oculos', confidence: 0.86, source: 'vision' as const }
      ],
      actions: [
        { name: 'lendo', confidence: 0.91, source: 'vision' as const }
      ],
      places: [
        { name: 'biblioteca', confidence: 0.79, source: 'vision' as const }
      ],
      colors: ['azul', 'branco'],
      ocr_text: 'Leitura na biblioteca üìö',
      notable_details: ['concentra√ß√£o na leitura', 'ambiente silencioso'],
      confidence_overall: 0.85
    },
    expected_behavior: {
      shouldHaveAnchors: true,
      minAnchors: 3,
      shouldIncludeReading: true,
      shouldIncludeAccessories: true
    }
  },
  {
    name: 'Contexto com Praia',
    visionContext: {
      schema_version: '1.0',
      detected_persons: { count: 1, name: 'Sofia' },
      objects: [
        { name: 'oculos_sol', confidence: 0.90, source: 'vision' as const },
        { name: 'protetor_solar', confidence: 0.84, source: 'vision' as const }
      ],
      actions: [
        { name: 'relaxando', confidence: 0.87, source: 'vision' as const }
      ],
      places: [
        { name: 'praia', confidence: 0.94, source: 'vision' as const }
      ],
      colors: ['azul', 'dourado'],
      ocr_text: 'Dia perfeito na praia ‚òÄÔ∏èüèñÔ∏è',
      notable_details: ['ondas calmas', 'areia dourada'],
      confidence_overall: 0.90
    },
    expected_behavior: {
      shouldHaveAnchors: true,
      minAnchors: 4,
      shouldIncludeBeach: true,
      shouldIncludeSummer: true
    }
  }
];

/**
 * Testa fun√ß√£o computeAnchors com cen√°rios realistas
 */
async function testComputeAnchors() {
  console.log('üß™ Testando fun√ß√£o computeAnchors...\n');

  const results = {
    totalScenarios: 0,
    successfulComputations: 0,
    anchorValidation: 0,
    deduplicationWorking: 0,
    stopwordsFiltered: 0
  };

  for (let i = 0; i < ANCHOR_COMPUTATION_SCENARIOS.length; i++) {
    const scenario = ANCHOR_COMPUTATION_SCENARIOS[i];
    results.totalScenarios++;

    console.log(`üè∑Ô∏è Cen√°rio ${i + 1}: ${scenario.name}`);

    try {
      // Computar √¢ncoras usando fun√ß√£o real do sistema
      const anchors = computeAnchors(scenario.visionContext);

      console.log(`   üìä √Çncoras computadas: ${anchors.length}`);
      if (anchors.length > 0) {
        console.log(`   üéØ Tokens: ${anchors.map(a => a.token).join(', ')}`);
      }

      // Valida√ß√µes b√°sicas
      const hasRequiredAnchors = anchors.length >= scenario.expected_behavior.minAnchors;
      if (hasRequiredAnchors) results.successfulComputations++;

      // Valida√ß√£o de conte√∫do espec√≠fico
      const tokens = anchors.map(a => a.token.toLowerCase());
      let contentValidation = 0;

      if (scenario.expected_behavior.shouldIncludePersonName && tokens.some(t => t.includes('ana') || t.includes('sofia'))) {
        contentValidation++;
      }

      if (scenario.expected_behavior.shouldIncludeObjects && tokens.some(t => ['guitarra', 'bola', 'cachorro', 'livro'].includes(t))) {
        contentValidation++;
      }

      if (scenario.expected_behavior.shouldIncludeOCR && tokens.some(t => ['musica', 'futebol', 'pet', 'leitura', 'praia'].includes(t))) {
        contentValidation++;
      }

      if (contentValidation >= 2) results.anchorValidation++;

      // Valida√ß√£o de deduplica√ß√£o
      const uniqueTokens = new Set(tokens);
      if (uniqueTokens.size === tokens.length) results.deduplicationWorking++;

      // Valida√ß√£o de filtragem de stopwords
      const hasStopwords = tokens.some(t => ['que', 'com', 'para', 'uma', 'como'].includes(t));
      if (!hasStopwords) results.stopwordsFiltered++;

      console.log(`   ‚úÖ Computa√ß√£o bem-sucedida: ${hasRequiredAnchors ? 'Sim' : 'N√£o'}`);
      console.log(`   üéØ Valida√ß√£o de conte√∫do: ${contentValidation}/2`);
      console.log(`   üîÑ Deduplica√ß√£o: ${uniqueTokens.size === tokens.length ? 'OK' : 'Falha'}`);
      console.log(`   üö´ Stopwords filtradas: ${!hasStopwords ? 'OK' : 'Falha'}`);

    } catch (error) {
      console.log(`   ‚ùå Erro na computa√ß√£o: ${error.message}`);
    }

    console.log('');
  }

  // Relat√≥rio final
  console.log('üìä RELAT√ìRIO FINAL DE TESTES computeAnchors');
  console.log('============================================');
  console.log(`Cen√°rios testados: ${results.totalScenarios}`);
  console.log(`Computa√ß√µes bem-sucedidas: ${results.successfulComputations}/${results.totalScenarios} (${(results.successfulComputations/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Valida√ß√£o de √¢ncoras: ${results.anchorValidation}/${results.totalScenarios} (${(results.anchorValidation/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Deduplica√ß√£o funcional: ${results.deduplicationWorking}/${results.totalScenarios} (${(results.deduplicationWorking/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Filtragem de stopwords: ${results.stopwordsFiltered}/${results.totalScenarios} (${(results.stopwordsFiltered/results.totalScenarios*100).toFixed(1)}%)`);

  // Crit√©rios de aceite
  const criteriaMet = {
    successfulComputations: results.successfulComputations / results.totalScenarios >= 0.8,
    anchorValidation: results.anchorValidation / results.totalScenarios >= 0.7,
    deduplication: results.deduplicationWorking / results.totalScenarios >= 0.9,
    stopwordsFiltering: results.stopwordsFiltered / results.totalScenarios >= 0.8
  };

  console.log('\nüéØ CRIT√âRIOS DE ACEITE:');
  console.log(`Computa√ß√µes ‚â•80%: ${criteriaMet.successfulComputations ? '‚úÖ' : '‚ùå'}`);
  console.log(`Valida√ß√£o ‚â•70%: ${criteriaMet.anchorValidation ? '‚úÖ' : '‚ùå'}`);
  console.log(`Deduplica√ß√£o ‚â•90%: ${criteriaMet.deduplication ? '‚úÖ' : '‚ùå'}`);
  console.log(`Stopwords ‚â•80%: ${criteriaMet.stopwordsFiltering ? '‚úÖ' : '‚ùå'}`);

  const allCriteriaPassed = Object.values(criteriaMet).every(Boolean);
  console.log(`\nüèÜ STATUS: ${allCriteriaPassed ? '‚úÖ computeAnchors VALIDADO' : '‚ùå computeAnchors PRECISA AJUSTES'}`);

  return allCriteriaPassed;
}

/**
 * Cen√°rios de teste para validateSuggestion (simulado para valida√ß√£o)
 */
const SUGGESTION_VALIDATION_SCENARIOS = [
  {
    name: 'Sugest√£o com √Çncoras Suficientes',
    suggestion: 'Que guitarra incr√≠vel! Vejo que voc√™ ama m√∫sica cl√°ssica, qual seu compositor favorito?',
    anchors: ['guitarra', 'musica', 'tocando', 'quarto'],
    expected_behavior: {
      shouldBeValid: true,
      minAnchorsUsed: 2,
      shouldTriggerRegeneration: false
    }
  },
  {
    name: 'Sugest√£o sem √Çncoras (Dispara Regenera√ß√£o)',
    suggestion: 'Ol√°! Como voc√™ est√° hoje? O tempo est√° √≥timo para uma conversa agrad√°vel.',
    anchors: ['guitarra', 'musica', 'tocando', 'quarto'],
    expected_behavior: {
      shouldBeValid: false,
      shouldTriggerRegeneration: true,
      maxRegenerations: 1
    }
  },
  {
    name: 'Sugest√£o com Repeti√ß√£o Alta',
    suggestion: 'Que guitarra incr√≠vel! Voc√™ toca h√° quanto tempo? Adorei sua guitarra!',
    anchors: ['guitarra', 'musica'],
    previousSuggestions: [
      'Que guitarra incr√≠vel! Voc√™ toca h√° quanto tempo?',
      'Adorei sua guitarra! Qual marca voc√™ recomenda?'
    ],
    expected_behavior: {
      shouldBeValid: false,
      repetitionRate: 0.7, // Deve ser > 0.6
      shouldTriggerRegeneration: true
    }
  },
  {
    name: 'Sugest√£o com √Çncoras e Repeti√ß√£o Baixa',
    suggestion: 'Que ambiente acolhedor! Vejo que voc√™ ama ler, qual seu g√™nero favorito de livro?',
    anchors: ['livro', 'lendo', 'biblioteca'],
    previousSuggestions: [
      'Que livro interessante! Filosofia sempre me fascinou.',
      'Adorei sua paix√£o pela leitura! O que voc√™ recomenda?'
    ],
    expected_behavior: {
      shouldBeValid: true,
      minAnchorsUsed: 2,
      maxRepetitionRate: 0.4,
      shouldNotTriggerRegeneration: true
    }
  }
];

/**
 * Testa valida√ß√£o de sugest√µes com cen√°rios realistas
 */
async function testValidateSuggestion() {
  console.log('üß™ Testando valida√ß√£o de sugest√µes...\n');

  const results = {
    totalScenarios: 0,
    validSuggestions: 0,
    regenerationTriggered: 0,
    repetitionControl: 0,
    anchorValidation: 0
  };

  for (let i = 0; i < SUGGESTION_VALIDATION_SCENARIOS.length; i++) {
    const scenario = SUGGESTION_VALIDATION_SCENARIOS[i];
    results.totalScenarios++;

    console.log(`üè∑Ô∏è Cen√°rio ${i + 1}: ${scenario.name}`);

    try {
      // Executar valida√ß√£o usando algoritmo real
      const validation = validateSuggestionAnchors(scenario.suggestion, scenario.anchors);

      console.log(`   üìä √Çncoras usadas: ${validation.anchorsUsed.length} (${validation.anchorsUsed.join(', ')})`);
      console.log(`   ‚úÖ Valida√ß√£o inicial: ${validation.isValid ? 'V√°lida' : 'Inv√°lida'}`);

      // Calcular repeti√ß√£o se houver sugest√µes anteriores
      let repetitionRate = 0.0;
      if (scenario.previousSuggestions) {
        repetitionRate = calculateRepetitionRate(scenario.suggestion, scenario.previousSuggestions);
        console.log(`   üîÑ Taxa de repeti√ß√£o: ${repetitionRate.toFixed(3)}`);
      }

      // Valida√ß√µes
      const hasRequiredAnchors = validation.anchorsUsed.length >= scenario.expected_behavior.minAnchorsUsed;
      if (hasRequiredAnchors) results.anchorValidation++;

      if (scenario.expected_behavior.shouldBeValid) {
        if (validation.isValid) results.validSuggestions++;
      }

      if (scenario.expected_behavior.shouldTriggerRegeneration) {
        if (!validation.isValid) results.regenerationTriggered++;
      }

      if (scenario.expected_behavior.shouldNotTriggerRegeneration) {
        if (validation.isValid) results.regenerationTriggered++;
      }

      // Valida√ß√£o de repeti√ß√£o
      if (scenario.expected_behavior.maxRepetitionRate) {
        if (repetitionRate <= scenario.expected_behavior.maxRepetitionRate) results.repetitionControl++;
      }

      console.log(`   üéØ Valida√ß√µes:`);
      console.log(`      - √Çncoras obrigat√≥rias: ${hasRequiredAnchors ? '‚úÖ' : '‚ùå'}`);
      console.log(`      - Deve ser v√°lida: ${scenario.expected_behavior.shouldBeValid ? (validation.isValid ? '‚úÖ' : '‚ùå') : 'N/A'}`);
      console.log(`      - Controle de repeti√ß√£o: ${scenario.expected_behavior.maxRepetitionRate ? (repetitionRate <= scenario.expected_behavior.maxRepetitionRate ? '‚úÖ' : '‚ùå') : 'N/A'}`);

    } catch (error) {
      console.log(`   ‚ùå Erro na valida√ß√£o: ${error.message}`);
    }

    console.log('');
  }

  // Relat√≥rio final
  console.log('üìä RELAT√ìRIO FINAL DE TESTES validateSuggestion');
  console.log('===============================================');
  console.log(`Cen√°rios testados: ${results.totalScenarios}`);
  console.log(`Sugest√µes v√°lidas: ${results.validSuggestions}/${results.totalScenarios} (${(results.validSuggestions/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Regenera√ß√£o funcional: ${results.regenerationTriggered}/${results.totalScenarios} (${(results.regenerationTriggered/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Controle de repeti√ß√£o: ${results.repetitionControl}/${results.totalScenarios} (${(results.repetitionControl/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Valida√ß√£o de √¢ncoras: ${results.anchorValidation}/${results.totalScenarios} (${(results.anchorValidation/results.totalScenarios*100).toFixed(1)}%)`);

  // Crit√©rios de aceite
  const criteriaMet = {
    validSuggestions: results.validSuggestions / results.totalScenarios >= 0.75,
    regenerationWorks: results.regenerationTriggered / results.totalScenarios >= 0.5,
    repetitionControl: results.repetitionControl / results.totalScenarios >= 0.8,
    anchorValidation: results.anchorValidation / results.totalScenarios >= 0.8
  };

  console.log('\nüéØ CRIT√âRIOS DE ACEITE:');
  console.log(`Sugest√µes v√°lidas ‚â•75%: ${criteriaMet.validSuggestions ? '‚úÖ' : '‚ùå'}`);
  console.log(`Regenera√ß√£o ‚â•50%: ${criteriaMet.regenerationWorks ? '‚úÖ' : '‚ùå'}`);
  console.log(`Controle de repeti√ß√£o ‚â•80%: ${criteriaMet.repetitionControl ? '‚úÖ' : '‚ùå'}`);
  console.log(`Valida√ß√£o de √¢ncoras ‚â•80%: ${criteriaMet.anchorValidation ? '‚úÖ' : '‚ùå'}`);

  const allCriteriaPassed = Object.values(criteriaMet).every(Boolean);
  console.log(`\nüèÜ STATUS: ${allCriteriaPassed ? '‚úÖ validateSuggestion VALIDADO' : '‚ùå validateSuggestion PRECISA AJUSTES'}`);

  return allCriteriaPassed;
}

/**
 * Teste principal dos componentes cr√≠ticos do Edge Function
 */
async function testEdgeFunctionComponents() {
  console.log('üöÄ TESTES AUTOMATIZADOS - COMPONENTES CR√çTICOS DO EDGE FUNCTION');
  console.log('===============================================================\n');

  try {
    // Testar computeAnchors usando implementa√ß√£o real
    const anchorsTestPassed = await testComputeAnchors();

    console.log('');

    // Testar validateSuggestion usando algoritmos reais
    const validationTestPassed = await testValidateSuggestion();

    // Resultado geral
    const overallSuccess = anchorsTestPassed && validationTestPassed;

    console.log('\nüèÅ RESULTADO GERAL DOS TESTES DO EDGE FUNCTION');
    console.log('================================================');
    console.log(`‚úÖ computeAnchors: ${anchorsTestPassed ? 'VALIDADO' : 'FALHANDO'}`);
    console.log(`‚úÖ validateSuggestion: ${validationTestPassed ? 'VALIDADO' : 'FALHANDO'}`);
    console.log(`\nüéØ STATUS FINAL: ${overallSuccess ? '‚úÖ EDGE FUNCTION VALIDADO' : '‚ùå EDGE FUNCTION PRECISA AJUSTES'}`);

    return overallSuccess;

  } catch (error) {
    console.log(`\n‚ùå Erro cr√≠tico nos testes: ${error.message}`);
    return false;
  }
}

// Fun√ß√µes auxiliares usando algoritmos reais
function validateSuggestionAnchors(suggestion: string, anchors: string[]): { isValid: boolean, anchorsUsed: string[] } {
  const suggestionLower = suggestion.toLowerCase();
  const anchorsUsed: string[] = [];

  anchors.forEach(anchor => {
    if (suggestionLower.includes(anchor.toLowerCase())) {
      anchorsUsed.push(anchor);
    }
  });

  return {
    isValid: anchorsUsed.length >= 1,
    anchorsUsed
  };
}

function calculateRepetitionRate(suggestion: string, previousSuggestions: string[]): number {
  if (previousSuggestions.length === 0) return 0.0;

  const suggestionBigrams = getBigrams(suggestion.toLowerCase());
  let maxSimilarity = 0.0;

  for (const prevSuggestion of previousSuggestions) {
    const prevBigrams = getBigrams(prevSuggestion.toLowerCase());
    const similarity = jaccardSimilarity(suggestionBigrams, prevBigrams);
    if (similarity > maxSimilarity) {
      maxSimilarity = similarity;
    }
  }

  return maxSimilarity;
}

function getBigrams(text: string): Set<string> {
  const bigrams = new Set<string>();
  const words = text.split(/\s+/);

  for (const word of words) {
    if (word.length >= 2) {
      for (let i = 0; i < word.length - 1; i++) {
        bigrams.add(word.substring(i, i + 2));
      }
    }
  }

  return bigrams;
}

function jaccardSimilarity(set1: Set<string>, set2: Set<string>): number {
  const intersection = new Set([...set1].filter(x => set2.has(x)));
  const union = new Set([...set1, ...set2]);

  return intersection.size / union.size;
}

// Executar testes se arquivo for chamado diretamente
if (import.meta.main) {
  await testEdgeFunctionComponents();
}
