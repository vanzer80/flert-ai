// test/persistence_comprehensive_test.ts
// Teste abrangente da implementa√ß√£o de persist√™ncia

import { generateSuggestion } from '../src/generation/generator.ts';
import { computeAnchors } from '../src/vision/anchors.ts';

/**
 * Cen√°rios de teste realistas para valida√ß√£o completa da persist√™ncia
 */
const COMPREHENSIVE_PERSISTENCE_SCENARIOS = [
  {
    name: 'Nova Conversa com An√°lise Visual',
    setup: {
      visionContext: {
        schema_version: '1.0',
        detected_persons: { count: 1, name: 'Maria' },
        objects: [
          { name: 'guitarra', confidence: 0.89, source: 'vision' as const }
        ],
        actions: [
          { name: 'tocando', confidence: 0.85, source: 'vision' as const }
        ],
        places: [
          { name: 'quarto', confidence: 0.76, source: 'vision' as const }
        ],
        colors: ['marrom', 'preto'],
        ocr_text: 'M√∫sica √© vida üé∏',
        notable_details: ['instrumento de qualidade', 'paix√£o evidente'],
        confidence_overall: 0.87
      },
      tone: 'genu√≠no',
      focus_tags: ['m√∫sica', 'paix√£o'],
      previous_suggestions: []
    },
    expected_behavior: {
      shouldSaveConversation: true,
      shouldSaveMetrics: true,
      shouldHaveVisionContext: true,
      shouldHaveAnchors: true,
      conversationIdGenerated: true
    }
  },
  {
    name: 'Gera√ß√£o Adicional com Contexto Existente',
    setup: {
      // Simula contexto existente no banco
      existingConversationId: 'conv_123',
      existingVisionContext: {
        schema_version: '1.0',
        detected_persons: { count: 1, name: 'Maria' },
        objects: [
          { name: 'guitarra', confidence: 0.89, source: 'vision' as const }
        ],
        actions: [
          { name: 'tocando', confidence: 0.85, source: 'vision' as const }
        ],
        places: [
          { name: 'quarto', confidence: 0.76, source: 'vision' as const }
        ],
        colors: ['marrom', 'preto'],
        ocr_text: 'M√∫sica √© vida üé∏',
        notable_details: ['instrumento de qualidade', 'paix√£o evidente'],
        confidence_overall: 0.87
      },
      existingAnchors: ['guitarra', 'tocando', 'quarto', 'musica'],
      existingExhaustedAnchors: ['guitarra'],
      existingPreviousSuggestions: [
        'Que guitarra incr√≠vel! Voc√™ toca h√° quanto tempo?',
        'Adorei sua paix√£o pela m√∫sica! Qual seu estilo favorito?'
      ],
      tone: 'flertar',
      focus_tags: ['m√∫sica', 'conex√£o'],
      skip_vision: true
    },
    expected_behavior: {
      shouldReuseContext: true,
      shouldAvoidExhaustedAnchors: true,
      shouldCalculateRepetition: true,
      shouldSaveNewMetrics: true,
      shouldHaveDifferentAnchors: true
    }
  },
  {
    name: 'Regenera√ß√£o ap√≥s Falha de √Çncoras',
    setup: {
      visionContext: {
        schema_version: '1.0',
        detected_persons: { count: 1 },
        objects: [
          { name: 'livro', confidence: 0.88, source: 'vision' as const }
        ],
        actions: [],
        places: [],
        colors: [],
        ocr_text: 'Lendo filosofia üìñ',
        notable_details: [],
        confidence_overall: 0.85
      },
      tone: 'genu√≠no',
      focus_tags: ['leitura'],
      previous_suggestions: [],
      // Simula cen√°rio onde primeira gera√ß√£o falha em usar √¢ncoras
      forceRegeneration: true
    },
    expected_behavior: {
      shouldTriggerRegeneration: true,
      shouldSaveBothGenerations: true,
      shouldHaveHigherConfidence: true,
      shouldUseAnchorsInRegeneration: true
    }
  }
];

/**
 * Testa m√©tricas cr√≠ticas da persist√™ncia
 */
async function testComprehensivePersistence() {
  console.log('üß™ Teste abrangente de persist√™ncia de contexto e m√©tricas...\n');

  const results = {
    totalScenarios: 0,
    successfulPersistence: 0,
    contextReuseSuccessful: 0,
    metricsAccuracy: 0,
    regenerationFunctionality: 0,
    errorHandling: 0
  };

  for (let i = 0; i < COMPREHENSIVE_PERSISTENCE_SCENARIOS.length; i++) {
    const scenario = COMPREHENSIVE_PERSISTENCE_SCENARIOS[i];
    results.totalScenarios++;

    console.log(`\nüè∑Ô∏è Cen√°rio ${i + 1}: ${scenario.name}`);
    console.log(`   Objetivo: ${Object.keys(scenario.expected_behavior).join(', ')}`);

    try {
      let anchors: any[] = [];

      // Preparar dados do cen√°rio
      if (scenario.setup.visionContext) {
        anchors = computeAnchors(scenario.setup.visionContext);
        console.log(`   √Çncoras computadas: ${anchors.map(a => a.token).join(', ')}`);
      }

      // Executar gera√ß√£o
      const result = await generateSuggestion({
        tone: scenario.setup.tone,
        focus_tags: scenario.setup.focus_tags,
        anchors,
        previous_suggestions: scenario.setup.previous_suggestions || [],
        exhausted_anchors: scenario.setup.existingExhaustedAnchors ?
          new Set(scenario.setup.existingExhaustedAnchors) : new Set()
      });

      if (result.success && result.suggestion) {
        results.successfulPersistence++;
        console.log(`   ‚úÖ GERA√á√ÉO BEM-SUCEDIDA:`);
        console.log(`   "${result.suggestion}"`);

        // An√°lise detalhada baseada no cen√°rio
        if (scenario.setup.existingConversationId) {
          // Cen√°rio de reutiliza√ß√£o de contexto
          const contextReused = result.regenerations_attempted === 0 &&
                               result.repetition_rate > 0;
          if (contextReused) results.contextReuseSuccessful++;
          console.log(`   üîÑ Contexto reutilizado: ${contextReused ? '‚úÖ' : '‚ùå'}`);
        }

        if (scenario.setup.existingExhaustedAnchors) {
          // Cen√°rio com √¢ncoras exauridas
          const avoidedExhausted = !result.anchors_used.some(anchor =>
            scenario.setup.existingExhaustedAnchors.includes(anchor)
          );
          console.log(`   üö´ √Çncoras exauridas evitadas: ${avoidedExhausted ? '‚úÖ' : '‚ùå'}`);
        }

        if (scenario.expected_behavior.shouldTriggerRegeneration) {
          // Cen√°rio de regenera√ß√£o
          const regenerationTriggered = result.regenerations_attempted > 0;
          if (regenerationTriggered) results.regenerationFunctionality++;
          console.log(`   üîÑ Regenera√ß√£o disparada: ${regenerationTriggered ? '‚úÖ' : '‚ùå'}`);
        }

        // Valida√ß√µes gerais
        const hasRequiredAnchors = result.anchors_used.length >= 1;
        const reasonableRepetition = result.repetition_rate <= 0.6;
        const reasonableLatency = result.regenerations_attempted <= 2;

        console.log(`   üìä M√âTRICAS:`);
        console.log(`      - √Çncoras usadas: ${result.anchors_used.length} (${result.anchors_used.join(', ')})`);
        console.log(`      - Repeti√ß√£o: ${result.repetition_rate.toFixed(3)}`);
        console.log(`      - Tentativas: ${result.regenerations_attempted}`);
        console.log(`      - Confian√ßa: ${result.low_confidence ? 'Baixa' : 'Alta'}`);

        console.log(`   üéØ VALIDA√á√ïES:`);
        console.log(`      - √Çncoras obrigat√≥rias: ${hasRequiredAnchors ? '‚úÖ' : '‚ùå'}`);
        console.log(`      - Controle de repeti√ß√£o: ${reasonableRepetition ? '‚úÖ' : '‚ùå'}`);
        console.log(`      - Lat√™ncia aceit√°vel: ${reasonableLatency ? '‚úÖ' : '‚ùå'}`);

      } else {
        console.log(`   ‚ùå Falha na gera√ß√£o: ${result.error}`);
      }

    } catch (error) {
      console.log(`   üí• Erro inesperado: ${error.message}`);
      results.errorHandling++;
    }
  }

  // Relat√≥rio final
  console.log(`\nüìä RELAT√ìRIO FINAL DE PERSIST√äNCIA`);
  console.log(`========================================`);
  console.log(`Cen√°rios testados: ${results.totalScenarios}`);
  console.log(`Persist√™ncia bem-sucedida: ${results.successfulPersistence}/${results.totalScenarios} (${(results.successfulPersistence/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Reutiliza√ß√£o de contexto: ${results.contextReuseSuccessful}/${results.totalScenarios} (${(results.contextReuseSuccessful/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Regenera√ß√£o funcional: ${results.regenerationFunctionality}/${results.totalScenarios} (${(results.regenerationFunctionality/results.totalScenarios*100).toFixed(1)}%)`);
  console.log(`Tratamento de erros: ${results.errorHandling}/${results.totalScenarios} (${(results.errorHandling/results.totalScenarios*100).toFixed(1)}%)`);

  // Crit√©rios de aceite finais
  const criteriaMet = {
    persistenceSuccess: results.successfulPersistence / results.totalScenarios >= 0.8,
    contextReuse: results.contextReuseSuccessful / results.totalScenarios >= 0.7,
    regenerationWorks: results.regenerationFunctionality / results.totalScenarios >= 0.5,
    errorHandling: results.errorHandling === 0
  };

  console.log(`\nüéØ CRIT√âRIOS DE ACEITE:`);
  console.log(`Persist√™ncia ‚â•80%: ${criteriaMet.persistenceSuccess ? '‚úÖ' : '‚ùå'}`);
  console.log(`Reutiliza√ß√£o ‚â•70%: ${criteriaMet.contextReuse ? '‚úÖ' : '‚ùå'}`);
  console.log(`Regenera√ß√£o ‚â•50%: ${criteriaMet.regenerationWorks ? '‚úÖ' : '‚ùå'}`);
  console.log(`Sem erros cr√≠ticos: ${criteriaMet.errorHandling ? '‚úÖ' : '‚ùå'}`);

  const allCriteriaPassed = Object.values(criteriaMet).every(Boolean);

  console.log(`\nüèÜ STATUS FINAL:`);
  console.log(`${allCriteriaPassed ? '‚úÖ PROMPT E VALIDADO COM SUCESSO' : '‚ùå PROMPT E PRECISA DE AJUSTES'}`);

  console.log('\nüèÅ Teste abrangente de persist√™ncia conclu√≠do!');
}

// Executar teste se arquivo for chamado diretamente
if (import.meta.main) {
  await testComprehensivePersistence();
}
