import 'package:flutter/material.dart';

class AppLocalizations {
  static const List<Locale> supportedLocales = [
    Locale('pt', 'BR'), // Portugu√™s brasileiro
  ];

  static const Locale defaultLocale = Locale('pt', 'BR');

  // Configura√ß√µes de localiza√ß√£o espec√≠ficas do Brasil
  static const String currencySymbol = 'R\$';
  static const String currencyCode = 'BRL';
  static const String countryCode = 'BR';
  static const String timeZone = 'America/Sao_Paulo';

  // Formata√ß√£o de n√∫meros e moeda
  static String formatCurrency(double value) {
    return 'R\$ ${value.toStringAsFixed(2).replaceAll('.', ',')}';
  }

  // Formata√ß√£o de data brasileira
  static String formatDate(DateTime date) {
    return '${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}';
  }

  // Formata√ß√£o de hora brasileira
  static String formatTime(DateTime time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  // G√≠rias e express√µes brasileiras para as sugest√µes de IA
  static const List<String> brazilianExpressions = [
    'que massa',
    'que show',
    'que legal',
    'que incr√≠vel',
    'que fofo',
    'que lindo',
    'que demais',
    'que top',
    'que da hora',
    'que bacana',
    'que maneiro',
    'que sensacional',
    'que perfeito',
    'que maravilhoso',
    'que espetacular',
  ];

  static const List<String> brazilianGreetings = [
    'E a√≠',
    'Oi',
    'Ol√°',
    'Tudo bem?',
    'Tudo joia?',
    'Beleza?',
    'Como vai?',
    'Opa',
    'Salve',
    'Fala a√≠',
  ];

  static const List<String> brazilianCompliments = [
    'voc√™ √© um arraso',
    'voc√™ √© demais',
    'voc√™ √© incr√≠vel',
    'voc√™ √© maravilhosa',
    'voc√™ √© linda demais',
    'voc√™ tem um sorriso lindo',
    'voc√™ √© muito fofa',
    'voc√™ √© perfeita',
    'voc√™ √© sensacional',
    'voc√™ √© um amor',
  ];

  // Contextos culturais brasileiros
  static const List<String> brazilianCulturalReferences = [
    'praia',
    'carnaval',
    'futebol',
    'churrasco',
    'a√ßa√≠',
    'caipirinha',
    'samba',
    'forr√≥',
    'festa junina',
    'feijoada',
    'brigadeiro',
    'p√£o de a√ß√∫car',
    'cristo redentor',
    'copacabana',
    'ipanema',
  ];

  // Atividades populares no Brasil
  static const List<String> brazilianActivities = [
    'ir √† praia',
    'fazer um churrasco',
    'tomar uma caipirinha',
    'assistir um jogo',
    'ir num show',
    'fazer uma trilha',
    'ir no cinema',
    'passear no shopping',
    'ir numa festa',
    'fazer um piquenique',
    'ir numa balada',
    'fazer um passeio de bike',
    'ir num restaurante',
    'fazer uma viagem',
    'ir numa feira',
  ];

  // Emojis populares no Brasil
  static const List<String> brazilianEmojis = [
    'üòç',
    'üòò',
    'ü•∞',
    'üòä',
    'üòâ',
    'üî•',
    'üíï',
    '‚ù§Ô∏è',
    'üíñ',
    'üåü',
    '‚ú®',
    'üéâ',
    'üèñÔ∏è',
    'üå¥',
    '‚òÄÔ∏è',
  ];

  // Valida√ß√£o de CPF (apenas formato)
  static bool isValidCPFFormat(String cpf) {
    final cleanCPF = cpf.replaceAll(RegExp(r'[^0-9]'), '');
    return cleanCPF.length == 11;
  }

  // Formata√ß√£o de CPF
  static String formatCPF(String cpf) {
    final cleanCPF = cpf.replaceAll(RegExp(r'[^0-9]'), '');
    if (cleanCPF.length == 11) {
      return '${cleanCPF.substring(0, 3)}.${cleanCPF.substring(3, 6)}.${cleanCPF.substring(6, 9)}-${cleanCPF.substring(9, 11)}';
    }
    return cpf;
  }

  // Valida√ß√£o de telefone brasileiro
  static bool isValidBrazilianPhone(String phone) {
    final cleanPhone = phone.replaceAll(RegExp(r'[^0-9]'), '');
    return cleanPhone.length == 10 || cleanPhone.length == 11;
  }

  // Formata√ß√£o de telefone brasileiro
  static String formatBrazilianPhone(String phone) {
    final cleanPhone = phone.replaceAll(RegExp(r'[^0-9]'), '');
    if (cleanPhone.length == 10) {
      return '(${cleanPhone.substring(0, 2)}) ${cleanPhone.substring(2, 6)}-${cleanPhone.substring(6, 10)}';
    } else if (cleanPhone.length == 11) {
      return '(${cleanPhone.substring(0, 2)}) ${cleanPhone.substring(2, 7)}-${cleanPhone.substring(7, 11)}';
    }
    return phone;
  }

  // Estados brasileiros
  static const Map<String, String> brazilianStates = {
    'AC': 'Acre',
    'AL': 'Alagoas',
    'AP': 'Amap√°',
    'AM': 'Amazonas',
    'BA': 'Bahia',
    'CE': 'Cear√°',
    'DF': 'Distrito Federal',
    'ES': 'Esp√≠rito Santo',
    'GO': 'Goi√°s',
    'MA': 'Maranh√£o',
    'MT': 'Mato Grosso',
    'MS': 'Mato Grosso do Sul',
    'MG': 'Minas Gerais',
    'PA': 'Par√°',
    'PB': 'Para√≠ba',
    'PR': 'Paran√°',
    'PE': 'Pernambuco',
    'PI': 'Piau√≠',
    'RJ': 'Rio de Janeiro',
    'RN': 'Rio Grande do Norte',
    'RS': 'Rio Grande do Sul',
    'RO': 'Rond√¥nia',
    'RR': 'Roraima',
    'SC': 'Santa Catarina',
    'SP': 'S√£o Paulo',
    'SE': 'Sergipe',
    'TO': 'Tocantins',
  };

  // Cidades populares para sugest√µes de viagem
  static const List<String> popularBrazilianCities = [
    'Rio de Janeiro',
    'S√£o Paulo',
    'Salvador',
    'Bras√≠lia',
    'Fortaleza',
    'Belo Horizonte',
    'Manaus',
    'Curitiba',
    'Recife',
    'Goi√¢nia',
    'Bel√©m',
    'Porto Alegre',
    'Guarulhos',
    'Campinas',
    'S√£o Lu√≠s',
    'S√£o Gon√ßalo',
    'Macei√≥',
    'Duque de Caxias',
    'Natal',
    'Teresina',
  ];
}
