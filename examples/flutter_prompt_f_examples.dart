// Exemplo de uso completo do sistema PROMPT F

import 'dart:typed_data';
import '../services/ai_service.dart';
import '../services/ocr_service.dart';
import '../utils/preprocess_screenshot.dart';

/**
 * EXEMPLO 1: Fluxo completo de primeira gera√ß√£o
 */
Future<void> exemploPrimeiraGeracao() async {
  print('üöÄ EXEMPLO 1: Primeira gera√ß√£o com pr√©-processamento e OCR');

  // 1. Simular captura de screenshot
  final imageBytes = await _simularCapturaScreenshot();
  print('üì∏ Imagem capturada: ${imageBytes.length} bytes');

  // 2. Inicializar servi√ßos
  final aiService = AIService();
  await aiService.initialize();

  // 3. Pr√©-processar imagem conforme PROMPT F
  final preprocessingStart = DateTime.now();
  final processedImage = await ScreenshotPreprocessor.preprocessImage(
    imageBytes,
    isScreenshot: true,
  );
  final preprocessingTime = DateTime.now().difference(preprocessingStart);

  print('‚ö° Pr√©-processamento: ${preprocessingTime.inMilliseconds}ms');
  print(ScreenshotPreprocessor.getOptimizationSummary(imageBytes, processedImage));

  // 4. Executar OCR local
  final ocrStart = DateTime.now();
  final ocrService = OCRService();
  await ocrService.initialize();
  final ocrText = await ocrService.extractText(processedImage);
  final ocrTime = DateTime.now().difference(ocrStart);

  print('üî§ OCR local: ${ocrTime.inMilliseconds}ms');
  print('   Texto extra√≠do: "$ocrText"');

  // 5. Gerar sugest√£o com dados otimizados
  final generationStart = DateTime.now();
  final result = await aiService.generateSuggestion(
    imageBytes: processedImage,
    userId: 'user_123',
    tone: 'descontra√≠do',
    focusTags: ['pet', 'divers√£o'],
    text: ocrText,
  );
  final generationTime = DateTime.now().difference(generationStart);

  print('ü§ñ Gera√ß√£o: ${generationTime.inMilliseconds}ms');
  print('‚úÖ Sugest√£o: "${result.suggestion}"');

  print('üìä Lat√™ncia total: ${(preprocessingTime + ocrTime + generationTime).inMilliseconds}ms');
  print('üíæ Contexto salvo no cache local para "Gerar mais"');
}

/**
 * EXEMPLO 2: "Gerar mais" reutilizando contexto em cache
 */
Future<void> exemploGerarMais() async {
  print('\nüîÑ EXEMPLO 2: "Gerar mais" com contexto em cache');

  // 1. Inicializar servi√ßo
  final aiService = AIService();
  await aiService.initialize();

  // 2. Gerar mais usando contexto existente (SEM an√°lise visual)
  final start = DateTime.now();
  final result = await aiService.generateMore(
    conversationId: 'conv_123',
    userId: 'user_123',
    tone: 'flertar',
    focusTags: ['conex√£o'],
  );
  final totalTime = DateTime.now().difference(start);

  print('‚ö° "Gerar mais": ${totalTime.inMilliseconds}ms');
  print('‚úÖ Nova sugest√£o: "${result.suggestion}"');
  print('üöÄ Redu√ß√£o de lat√™ncia: ~800ms (sem Vision)');
}

/**
 * EXEMPLO 3: Teste de lat√™ncia antes/depois das otimiza√ß√µes
 */
Future<void> exemploComparacaoLatencia() async {
  print('\nüìä EXEMPLO 3: Compara√ß√£o de lat√™ncia');

  // Simular dados de teste
  final imageBytes = await _simularImagemGrande();

  // ANTES (sem otimiza√ß√µes)
  print('‚ùå ANTES - Sem otimiza√ß√µes:');
  final antesStart = DateTime.now();
  // Simular: envio direto da imagem grande + chamada Vision
  await Future.delayed(const Duration(milliseconds: 1500)); // Simula Vision
  final antesTime = DateTime.now().difference(antesStart);
  print('   Lat√™ncia: ${antesTime.inMilliseconds}ms');

  // DEPOIS (com otimiza√ß√µes do PROMPT F)
  print('‚úÖ DEPOIS - Com otimiza√ß√µes PROMPT F:');

  final depoisStart = DateTime.now();

  // 1. Pr√©-processamento
  final preprocessingStart = DateTime.now();
  final processedImage = await ScreenshotPreprocessor.preprocessImage(imageBytes);
  final preprocessingTime = DateTime.now().difference(preprocessingStart);

  // 2. OCR local
  final ocrStart = DateTime.now();
  final ocrService = OCRService();
  await ocrService.initialize();
  final ocrText = await ocrService.extractText(processedImage);
  final ocrTime = DateTime.now().difference(ocrStart);

  // 3. Gera√ß√£o (simulada, sem Vision real)
  final generationStart = DateTime.now();
  await Future.delayed(const Duration(milliseconds: 300)); // Simula gera√ß√£o
  final generationTime = DateTime.now().difference(generationStart);

  final depoisTime = DateTime.now().difference(depoisStart);

  print('   Pr√©-processamento: ${preprocessingTime.inMilliseconds}ms');
  print('   OCR local: ${ocrTime.inMilliseconds}ms');
  print('   Gera√ß√£o: ${generationTime.inMilliseconds}ms');
  print('   Total: ${depoisTime.inMilliseconds}ms');
  print('üí° Melhoria: ${antesTime.inMilliseconds - depoisTime.inMilliseconds}ms (${((1 - depoisTime.inMilliseconds / antesTime.inMilliseconds) * 100).toStringAsFixed(1)}% mais r√°pido)');
}

/// Simula captura de screenshot (em produ√ß√£o, seria camera/gallery)
Future<Uint8List> _simularCapturaScreenshot() async {
  // Simula bytes de imagem (em produ√ß√£o, seria ImagePicker ou camera)
  await Future.delayed(const Duration(milliseconds: 100));
  return Uint8List.fromList(List.generate(2048000, (i) => i % 256)); // ~2MB
}

/// Simula imagem grande para teste de otimiza√ß√£o
Future<Uint8List> _simularImagemGrande() async {
  await Future.delayed(const Duration(milliseconds: 50));
  return Uint8List.fromList(List.generate(5120000, (i) => i % 256)); // ~5MB
}

void main() async {
  print('üß™ EXEMPLOS DE USO DO PROMPT F - Flutter Otimizado');

  try {
    await exemploPrimeiraGeracao();
    await exemploGerarMais();
    await exemploComparacaoLatencia();

    print('\nüéâ PROMPT F implementado com sucesso!');
    print('‚úÖ Pr√©-processamento autom√°tico');
    print('‚úÖ OCR local (mobile/web)');
    print('‚úÖ Cache local de contexto');
    print('‚úÖ Payload otimizado');
    print('‚úÖ "Gerar mais" sem Vision');
    print('‚úÖ Redu√ß√£o significativa de lat√™ncia');

  } catch (e) {
    print('‚ùå Erro nos exemplos: $e');
  }
}
